// source: survey.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.survey.Answer', null, global);
goog.exportSymbol('proto.survey.AnswerStats', null, global);
goog.exportSymbol('proto.survey.ListData', null, global);
goog.exportSymbol('proto.survey.Survey', null, global);
goog.exportSymbol('proto.survey.SurveyData', null, global);
goog.exportSymbol('proto.survey.SurveyStats', null, global);
goog.exportSymbol('proto.survey.Vote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.Answer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.Answer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.Answer.displayName = 'proto.survey.Answer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.Survey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.survey.Survey.repeatedFields_, null);
};
goog.inherits(proto.survey.Survey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.Survey.displayName = 'proto.survey.Survey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.Vote.displayName = 'proto.survey.Vote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.ListData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.ListData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.ListData.displayName = 'proto.survey.ListData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.SurveyData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.SurveyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.SurveyData.displayName = 'proto.survey.SurveyData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.AnswerStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.survey.AnswerStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.AnswerStats.displayName = 'proto.survey.AnswerStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.survey.SurveyStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.survey.SurveyStats.repeatedFields_, null);
};
goog.inherits(proto.survey.SurveyStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.survey.SurveyStats.displayName = 'proto.survey.SurveyStats';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.Answer.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.Answer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.Answer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.Answer.toObject = function(includeInstance, msg) {
  var f, obj = {
    answerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    answer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.Answer}
 */
proto.survey.Answer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.Answer;
  return proto.survey.Answer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.Answer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.Answer}
 */
proto.survey.Answer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnswerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.Answer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.Answer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.Answer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.Answer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 answer_id = 1;
 * @return {number}
 */
proto.survey.Answer.prototype.getAnswerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.Answer} returns this
 */
proto.survey.Answer.prototype.setAnswerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string answer = 2;
 * @return {string}
 */
proto.survey.Answer.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.Answer} returns this
 */
proto.survey.Answer.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.survey.Survey.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.Survey.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.Survey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.Survey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.Survey.toObject = function(includeInstance, msg) {
  var f, obj = {
    surveyid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    question: jspb.Message.getFieldWithDefault(msg, 2, ""),
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    proto.survey.Answer.toObject, includeInstance),
    username: jspb.Message.getFieldWithDefault(msg, 4, ""),
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.survey.Vote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.Survey}
 */
proto.survey.Survey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.Survey;
  return proto.survey.Survey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.Survey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.Survey}
 */
proto.survey.Survey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSurveyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 3:
      var value = new proto.survey.Answer;
      reader.readMessage(value,proto.survey.Answer.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = new proto.survey.Vote;
      reader.readMessage(value,proto.survey.Vote.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.Survey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.Survey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.Survey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.Survey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurveyid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.survey.Answer.serializeBinaryToWriter
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.survey.Vote.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 surveyID = 1;
 * @return {number}
 */
proto.survey.Survey.prototype.getSurveyid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.Survey} returns this
 */
proto.survey.Survey.prototype.setSurveyid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string question = 2;
 * @return {string}
 */
proto.survey.Survey.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.Survey} returns this
 */
proto.survey.Survey.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Answer answers = 3;
 * @return {!Array<!proto.survey.Answer>}
 */
proto.survey.Survey.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.survey.Answer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.survey.Answer, 3));
};


/**
 * @param {!Array<!proto.survey.Answer>} value
 * @return {!proto.survey.Survey} returns this
*/
proto.survey.Survey.prototype.setAnswersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.survey.Answer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.survey.Answer}
 */
proto.survey.Survey.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.survey.Answer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.survey.Survey} returns this
 */
proto.survey.Survey.prototype.clearAnswersList = function() {
  return this.setAnswersList([]);
};


/**
 * optional string username = 4;
 * @return {string}
 */
proto.survey.Survey.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.Survey} returns this
 */
proto.survey.Survey.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Vote votes = 5;
 * @return {!Array<!proto.survey.Vote>}
 */
proto.survey.Survey.prototype.getVotesList = function() {
  return /** @type{!Array<!proto.survey.Vote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.survey.Vote, 5));
};


/**
 * @param {!Array<!proto.survey.Vote>} value
 * @return {!proto.survey.Survey} returns this
*/
proto.survey.Survey.prototype.setVotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.survey.Vote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.survey.Vote}
 */
proto.survey.Survey.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.survey.Vote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.survey.Survey} returns this
 */
proto.survey.Survey.prototype.clearVotesList = function() {
  return this.setVotesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    surveyid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    answerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    username: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.Vote}
 */
proto.survey.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.Vote;
  return proto.survey.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.Vote}
 */
proto.survey.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSurveyid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnswerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurveyid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAnswerid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 surveyID = 1;
 * @return {number}
 */
proto.survey.Vote.prototype.getSurveyid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.Vote} returns this
 */
proto.survey.Vote.prototype.setSurveyid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 answerID = 2;
 * @return {number}
 */
proto.survey.Vote.prototype.getAnswerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.Vote} returns this
 */
proto.survey.Vote.prototype.setAnswerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.survey.Vote.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.Vote} returns this
 */
proto.survey.Vote.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.ListData.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.ListData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.ListData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.ListData.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxLen: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.ListData}
 */
proto.survey.ListData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.ListData;
  return proto.survey.ListData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.ListData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.ListData}
 */
proto.survey.ListData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxLen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.ListData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.ListData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.ListData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.ListData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxLen();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 max_len = 1;
 * @return {number}
 */
proto.survey.ListData.prototype.getMaxLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.ListData} returns this
 */
proto.survey.ListData.prototype.setMaxLen = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.SurveyData.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.SurveyData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.SurveyData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.SurveyData.toObject = function(includeInstance, msg) {
  var f, obj = {
    surveyid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.SurveyData}
 */
proto.survey.SurveyData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.SurveyData;
  return proto.survey.SurveyData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.SurveyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.SurveyData}
 */
proto.survey.SurveyData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSurveyid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.SurveyData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.SurveyData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.SurveyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.SurveyData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurveyid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 surveyID = 1;
 * @return {number}
 */
proto.survey.SurveyData.prototype.getSurveyid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.SurveyData} returns this
 */
proto.survey.SurveyData.prototype.setSurveyid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.AnswerStats.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.AnswerStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.AnswerStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.AnswerStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    answer: (f = msg.getAnswer()) && proto.survey.Answer.toObject(includeInstance, f),
    numberofvotes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    percentvotes: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.AnswerStats}
 */
proto.survey.AnswerStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.AnswerStats;
  return proto.survey.AnswerStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.AnswerStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.AnswerStats}
 */
proto.survey.AnswerStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.survey.Answer;
      reader.readMessage(value,proto.survey.Answer.deserializeBinaryFromReader);
      msg.setAnswer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberofvotes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentvotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.AnswerStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.AnswerStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.AnswerStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.AnswerStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.survey.Answer.serializeBinaryToWriter
    );
  }
  f = message.getNumberofvotes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPercentvotes();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional Answer answer = 1;
 * @return {?proto.survey.Answer}
 */
proto.survey.AnswerStats.prototype.getAnswer = function() {
  return /** @type{?proto.survey.Answer} */ (
    jspb.Message.getWrapperField(this, proto.survey.Answer, 1));
};


/**
 * @param {?proto.survey.Answer|undefined} value
 * @return {!proto.survey.AnswerStats} returns this
*/
proto.survey.AnswerStats.prototype.setAnswer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.survey.AnswerStats} returns this
 */
proto.survey.AnswerStats.prototype.clearAnswer = function() {
  return this.setAnswer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.survey.AnswerStats.prototype.hasAnswer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 numberOfVotes = 2;
 * @return {number}
 */
proto.survey.AnswerStats.prototype.getNumberofvotes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.AnswerStats} returns this
 */
proto.survey.AnswerStats.prototype.setNumberofvotes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double percentVotes = 3;
 * @return {number}
 */
proto.survey.AnswerStats.prototype.getPercentvotes = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.survey.AnswerStats} returns this
 */
proto.survey.AnswerStats.prototype.setPercentvotes = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.survey.SurveyStats.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.survey.SurveyStats.prototype.toObject = function(opt_includeInstance) {
  return proto.survey.SurveyStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.survey.SurveyStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.SurveyStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: jspb.Message.getFieldWithDefault(msg, 1, ""),
    answerstatsList: jspb.Message.toObjectList(msg.getAnswerstatsList(),
    proto.survey.AnswerStats.toObject, includeInstance),
    votesnumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.survey.SurveyStats}
 */
proto.survey.SurveyStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.survey.SurveyStats;
  return proto.survey.SurveyStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.survey.SurveyStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.survey.SurveyStats}
 */
proto.survey.SurveyStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 2:
      var value = new proto.survey.AnswerStats;
      reader.readMessage(value,proto.survey.AnswerStats.deserializeBinaryFromReader);
      msg.addAnswerstats(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVotesnumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.survey.SurveyStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.survey.SurveyStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.survey.SurveyStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.survey.SurveyStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnswerstatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.survey.AnswerStats.serializeBinaryToWriter
    );
  }
  f = message.getVotesnumber();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string question = 1;
 * @return {string}
 */
proto.survey.SurveyStats.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.survey.SurveyStats} returns this
 */
proto.survey.SurveyStats.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated AnswerStats answerStats = 2;
 * @return {!Array<!proto.survey.AnswerStats>}
 */
proto.survey.SurveyStats.prototype.getAnswerstatsList = function() {
  return /** @type{!Array<!proto.survey.AnswerStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.survey.AnswerStats, 2));
};


/**
 * @param {!Array<!proto.survey.AnswerStats>} value
 * @return {!proto.survey.SurveyStats} returns this
*/
proto.survey.SurveyStats.prototype.setAnswerstatsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.survey.AnswerStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.survey.AnswerStats}
 */
proto.survey.SurveyStats.prototype.addAnswerstats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.survey.AnswerStats, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.survey.SurveyStats} returns this
 */
proto.survey.SurveyStats.prototype.clearAnswerstatsList = function() {
  return this.setAnswerstatsList([]);
};


/**
 * optional int64 votesNumber = 3;
 * @return {number}
 */
proto.survey.SurveyStats.prototype.getVotesnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.survey.SurveyStats} returns this
 */
proto.survey.SurveyStats.prototype.setVotesnumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.survey);
